datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  instagram     String?
  number        String?
  role          String?
  team          Teams[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaigns {
  id          String       @id @default(cuid())
  name        String
  description String?
  location    String?
  date        DateTime?    @db.Date
  team        Teams?
  callsheet   CallSheet?
  wardrobe    Wardrobe[]
  moodboards  Moodboards[]
  Model       Models[]
  SavedLooks  SavedLooks[]
}

model Teams {
  id          String    @id @default(cuid())
  campaign    Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        String?
  permissions String
}

model CallSheet {
  id         String    @id @default(cuid())
  campaign   Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String    @unique
  time       DateTime  @db.Time
  task       String
  notes      String?
}

model Wardrobe {
  id                    String       @id @default(cuid())
  campaign              Campaigns    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId            String
  url                   String
  brand                 String
  description           String
  category              String
  size                  String?
  savedLooks_top        SavedLooks[] @relation("Top")
  savedLooks_top2       SavedLooks[] @relation("Top2")
  savedLooks_bottom     SavedLooks[] @relation("Bottom")
  savedLooks_shoes      SavedLooks[] @relation("Shoes")
  savedLooks_accessory1 SavedLooks[] @relation("Accessory1")
  savedLooks_accessory2 SavedLooks[] @relation("Accessory2")
  savedLooks_accessory3 SavedLooks[] @relation("Accessory3")
  savedLooks_accessory4 SavedLooks[] @relation("Accessory4")
  // SavedLooks            SavedLooks[]
}

model Moodboards {
  id         String    @id @default(cuid())
  campaign   Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  name       String
  images     Images[]
}

model Images {
  id          String     @id @default(cuid())
  moodboards  Moodboards @relation(fields: [moodboardId], references: [id], onDelete: Cascade)
  moodboardId String
  url         String?
  text        String?
}

model Models {
  id         String       @id @default(cuid())
  campaign   Campaigns    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String
  name       String
  urlFace    String
  urlBody    String
  instagram  String?
  agency     String?
  contact    String?
  height     Int?
  bust       Int?
  waist      Int?
  hip        Int?
  shoe       Int?
  dress      Int?
  hair       String?
  eyes       String?
  SavedLooks SavedLooks[]
}

model SavedLooks {
  id         String    @id @default(cuid())
  campaign   Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId String

  models  Models @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId String

  top   Wardrobe @relation("Top", fields: [topId], references: [id], onDelete: Cascade)
  topId String

  top2   Wardrobe @relation("Top2", fields: [top2Id], references: [id], onDelete: Cascade)
  top2Id String

  bottom   Wardrobe @relation("Bottom", fields: [bottomId], references: [id], onDelete: Cascade)
  bottomId String

  shoes   Wardrobe @relation("Shoes", fields: [shoesId], references: [id], onDelete: Cascade)
  shoesId String

  accessory1   Wardrobe @relation("Accessory1", fields: [accessory1Id], references: [id], onDelete: Cascade)
  accessory1Id String

  accessory2   Wardrobe @relation("Accessory2", fields: [accessory2Id], references: [id], onDelete: Cascade)
  accessory2Id String

  accessory3   Wardrobe @relation("Accessory3", fields: [accessory3Id], references: [id], onDelete: Cascade)
  accessory3Id String

  accessory4   Wardrobe @relation("Accessory4", fields: [accessory4Id], references: [id], onDelete: Cascade)
  accessory4Id String

  // Wardrobe   Wardrobe? @relation(fields: [wardrobeId], references: [id], onDelete: Cascade)
  // wardrobeId String?
}
